//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""PlayerPlatformer"",
            ""id"": ""f6044581-0bd0-49c3-86bc-83082027a9ce"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""466adcd1-4f71-4493-afe3-434c0c3bf074"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""151cf996-4769-4b35-a703-f51abb64e4d4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""10cf7918-edc6-405f-a15e-afe4c414022a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d18bed15-238a-4673-b0ac-d1a95772f63d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""77ae8b15-239b-445a-8a21-8f0336a6210f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4d0e8815-7125-4012-a2d1-80ccc9f80081"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ae4a2058-17e2-4006-a5da-e5bb3a4eaed4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da9c8f1d-b7c8-4a16-b1c2-2944a5971a09"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerLobby"",
            ""id"": ""2d8aa995-afc3-4bcb-8155-e9b83d8e005f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""58551c97-2622-4707-9afd-f9f8a1995600"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1635be66-8934-4c8a-b4a7-b214b34d7f06"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""96421ce3-44c2-4e29-bbee-0bcc5a106e9a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b678ed8e-b1c7-492c-ac33-1526ea919068"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a50e0963-3a9e-4b87-b270-11aa5e978425"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9dee93a7-703c-444e-8fd7-f1abebd9af4a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerPlatformer
        m_PlayerPlatformer = asset.FindActionMap("PlayerPlatformer", throwIfNotFound: true);
        m_PlayerPlatformer_Horizontal = m_PlayerPlatformer.FindAction("Horizontal", throwIfNotFound: true);
        m_PlayerPlatformer_Jump = m_PlayerPlatformer.FindAction("Jump", throwIfNotFound: true);
        m_PlayerPlatformer_Down = m_PlayerPlatformer.FindAction("Down", throwIfNotFound: true);
        // PlayerLobby
        m_PlayerLobby = asset.FindActionMap("PlayerLobby", throwIfNotFound: true);
        m_PlayerLobby_Movement = m_PlayerLobby.FindAction("Movement", throwIfNotFound: true);
    }

    ~@PlayerInputSystem()
    {
        UnityEngine.Debug.Assert(!m_PlayerPlatformer.enabled, "This will cause a leak and performance issues, PlayerInputSystem.PlayerPlatformer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerLobby.enabled, "This will cause a leak and performance issues, PlayerInputSystem.PlayerLobby.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerPlatformer
    private readonly InputActionMap m_PlayerPlatformer;
    private List<IPlayerPlatformerActions> m_PlayerPlatformerActionsCallbackInterfaces = new List<IPlayerPlatformerActions>();
    private readonly InputAction m_PlayerPlatformer_Horizontal;
    private readonly InputAction m_PlayerPlatformer_Jump;
    private readonly InputAction m_PlayerPlatformer_Down;
    public struct PlayerPlatformerActions
    {
        private @PlayerInputSystem m_Wrapper;
        public PlayerPlatformerActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_PlayerPlatformer_Horizontal;
        public InputAction @Jump => m_Wrapper.m_PlayerPlatformer_Jump;
        public InputAction @Down => m_Wrapper.m_PlayerPlatformer_Down;
        public InputActionMap Get() { return m_Wrapper.m_PlayerPlatformer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerPlatformerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerPlatformerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerPlatformerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerPlatformerActionsCallbackInterfaces.Add(instance);
            @Horizontal.started += instance.OnHorizontal;
            @Horizontal.performed += instance.OnHorizontal;
            @Horizontal.canceled += instance.OnHorizontal;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IPlayerPlatformerActions instance)
        {
            @Horizontal.started -= instance.OnHorizontal;
            @Horizontal.performed -= instance.OnHorizontal;
            @Horizontal.canceled -= instance.OnHorizontal;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IPlayerPlatformerActions instance)
        {
            if (m_Wrapper.m_PlayerPlatformerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerPlatformerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerPlatformerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerPlatformerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerPlatformerActions @PlayerPlatformer => new PlayerPlatformerActions(this);

    // PlayerLobby
    private readonly InputActionMap m_PlayerLobby;
    private List<IPlayerLobbyActions> m_PlayerLobbyActionsCallbackInterfaces = new List<IPlayerLobbyActions>();
    private readonly InputAction m_PlayerLobby_Movement;
    public struct PlayerLobbyActions
    {
        private @PlayerInputSystem m_Wrapper;
        public PlayerLobbyActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerLobby_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLobby; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLobbyActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerLobbyActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerLobbyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerLobbyActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerLobbyActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerLobbyActions instance)
        {
            if (m_Wrapper.m_PlayerLobbyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerLobbyActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerLobbyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerLobbyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerLobbyActions @PlayerLobby => new PlayerLobbyActions(this);
    public interface IPlayerPlatformerActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface IPlayerLobbyActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
